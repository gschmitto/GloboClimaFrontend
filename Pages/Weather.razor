@page "/weather/{cityName}"
@inject WeatherService weatherService
@inject HttpClient Http
@using GloboClimaFrontend.Models
@using GloboClimaFrontend.Services
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@using System.Text
@using System.Net.Http.Headers
@using Newtonsoft.Json

<PageTitle>Weather - GloboClima</PageTitle>

<div class="d-flex justify-content-between align-items-center">
    <h3 class="me-3">Clima em @cityName</h3>
    <button @onclick="FavoriteCity" class="btn btn-primary" style="width: 90px;">Favoritar</button>
</div>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">
        @errorMessage
    </div>
}

@if (weatherResponse != null)
{
    <div>
        <p><strong>Coordenadas:</strong> Latitude: @weatherResponse.Coord.Lat, Longitude: @weatherResponse.Coord.Lon</p>
        <p><strong>Visibilidade:</strong> @(weatherResponse.Visibility / 1000) km</p>

        <h5>Dados Principais:</h5>
        <p><strong>Temperatura:</strong> @Math.Round(weatherResponse.Main.Temp - 273.15) &deg;C</p>
        <p><strong>Temperatura Aparente:</strong> @Math.Round(weatherResponse.Main.FeelsLike - 273.15) &deg;C</p>
        <p><strong>Temperatura Mínima:</strong> @Math.Round(weatherResponse.Main.TempMin - 273.15) &deg;C</p>
        <p><strong>Temperatura Máxima:</strong> @Math.Round(weatherResponse.Main.TempMax - 273.15) &deg;C</p>
        <p><strong>Pressão:</strong> @weatherResponse.Main.Pressure hPa</p>
        <p><strong>Umidade:</strong> @weatherResponse.Main.Humidity %</p>
        <p><strong>Nível do Mar:</strong> @weatherResponse.Main.SeaLevel m</p>
        <p><strong>Nível do Solo:</strong> @weatherResponse.Main.GrndLevel m</p>

        <h5>Vento:</h5>
        @if (weatherResponse.Wind != null)
        {
            <p><strong>Velocidade:</strong> @(weatherResponse.Wind.Speed * 3.6) km/h</p>
            <p><strong>Direção:</strong> @weatherResponse.Wind.Deg &deg;</p>
            <p><strong>Rajada:</strong> @(weatherResponse.Wind.Gust * 3.6) km/h</p>
        }

        <h5>Sistema:</h5>
        @if (weatherResponse.Sys != null)
        {
            <p><strong>País:</strong> @weatherResponse.Sys.Country</p>
            <p><strong>Nascer do Sol:</strong> @DateTimeOffset.FromUnixTimeSeconds(weatherResponse.Sys.Sunrise).ToLocalTime().ToString("dd/MM/yyyy HH:mm:ss")</p>
            <p><strong>Por do Sol:</strong> @DateTimeOffset.FromUnixTimeSeconds(weatherResponse.Sys.Sunset).ToLocalTime().ToString("dd/MM/yyyy HH:mm:ss")</p>
        }
    </div>
}
else
{
    <p>Carregando dados do clima...</p>
}

@code {
    [Parameter] public string cityName { get; set; }
    private WeatherResponse weatherResponse;
    private string errorMessage;

    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(cityName))
        {
            try
            {
                weatherResponse = await weatherService.GetWeatherByCityAsync(cityName);

                if (weatherResponse == null)
                {
                    errorMessage = "Nenhuma resposta recebida do serviço de clima.";
                }
            }
            catch (Exception ex)
            {
                errorMessage = $"Erro ao chamar o serviço de clima: {ex.Message}";
            }
        }
        else
        {
            errorMessage = "Nome da cidade está vazio.";
        }
    }

    private async Task FavoriteCity()
    {
        try
        {
            // Obtém o token de autenticação do LocalStorage
            var token = await LocalStorage.GetItemAsync<string>("authToken");

            if (string.IsNullOrEmpty(token))
            {
                errorMessage = "Você precisa estar logado para favoritar uma cidade.";
                return;
            }

            // Cria a requisição para favoritar a cidade
            var requestBody = new { cityName = cityName };
            var content = new StringContent(JsonConvert.SerializeObject(requestBody), Encoding.UTF8, "application/json");

            // Cria a requisição HTTP e adiciona o token no cabeçalho de autenticação
            var requestMessage = new HttpRequestMessage(HttpMethod.Post, "/api/City/favorites/city")
            {
                Content = content
            };
            requestMessage.Headers.Authorization = new AuthenticationHeaderValue("Bearer", token);

            // Envia a requisição
            var response = await Http.SendAsync(requestMessage);

            if (response.IsSuccessStatusCode)
            {
                errorMessage = "Cidade favoritada com sucesso!";
            }
            else
            {
                errorMessage = "Erro ao favoritar a cidade.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Erro ao tentar favoritar a cidade: {ex.Message}";
        }
    }
}
